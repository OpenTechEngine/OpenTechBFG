/*
 * FontMethods.h
 *
 *  Created on: 3 de febr. 2018
 *      Author: Biel BestuÃ© de Luna
 *
 *      this file is GPLv3
 */

#ifndef NEO_TOOLS_COMPILERS_IMPORTFONT_FONTMETHODS_H_
#define NEO_TOOLS_COMPILERS_IMPORTFONT_FONTMETHODS_H_

#include "../idlib/Str.h"
#include "../idlib/containers/List.h"
#include "../framework/Common.h"

namespace BFG {

/*
those represent all the folder names shared  amongst the classes generated by
the importer himself given the correct inputs in the console.
*/
typedef struct {
	idStr	relativeFilePath;
	idStr	relativeInputDir;
	idStr	relativeOutputDir;
} sharedStruct_t;

/*
 * These are classes represent fonts generated by BMFont and gathered from the XML file
 */

typedef struct
{
    int 	id;        	// char utf32
    int 	x;         	// x position in image (in pixels)
    int 	y;         	// y position in image (in pixels)
    int 	width;    	// width in image (in pixels)
    int 	height;    	// height in image (in pixels)
    int 	xoffset;   	// offset from pen position to start of glyph (in pixels)
    int 	yoffset;  	// offset from top of the line to start of glyph (in pixels)
    int 	xadvance;	// how much to move pen after drawing glyph (in pixels)
    int 	page;      	// image number
    int 	chnl;      	// channel mask in the image (0xF == all channels) (important when chars are packed)
} BMglyphStructure_t;

// information about how the font was generated
typedef struct
{
	idStr 	faceName;
	int		size;		// font size in points
	bool 	bold;
  	bool 	italic;
  	idStr	charset;
	bool	unicode;    // true if unicode (charset is empty then)
	int 	heightStretchPercent;
	bool 	fontSmoothing;
 	int 	antiAliasLevel;
 	int 	paddingT;
  	int 	paddingR;
  	int 	paddingB;
   	int 	paddingL;
  	int 	spacingHoriz;
   	int 	spacingVert;
  	int 	outlineThickness;
} BMprocessfontStructure_t;

// information about the generated font
typedef struct
{
	int 	lineHeight;	// line height
	int		fontBase;	// dist from top to baseline
	int		scaleW;  	// width of the picture
	int 	scaleH;  	// height of the picture
	int 	numPages;	// number of pictures
	bool 	packed;     // true if glyphs are packed into multiple channels
	int		alphaChnl;	// contents of alpha channel: 0 - glyph, 1 - outline, 2 - encoded glyph & outline, 3 - zero, 4 - one
	int		redChnl;  	// same
	int		greenChnl; 	// same
	int 	blueChnl;  	// same
} BMgeneratedfontStructure_t;

class BMglyph {
public:
	BMglyph();
	void Read(int _id, int _x, int _y, int _width, int _height, int _xoffset, int _yoffset, int _xadvance, int _page, int _chnl);

	const BMglyphStructure_t& getGlyphStructue() const {
		return glyphStructue;
	}

private:
	void		Clear();
	BMglyphStructure_t glyphStructue;
};

class BMpage {
public:
	BMpage();

	void Read( int id_num, idStr image_file );

	int getId() const {
		return id;
	}

	const idStr& getImageFile() const {
		return qPath_ImageFile;
	}

private:
	int id;
    idStr qPath_ImageFile;

};

class BMfont {
public:
	BMfont( sharedStruct_t _sharedStruct );
	virtual ~BMfont();

	bool Read();

	void DeclareContents();

	const BMgeneratedfontStructure_t& getGeneratedFontStructure() const {
		return generatedFontStructure;
	}

	void setGeneratedFontStructure(
			const BMgeneratedfontStructure_t& generatedFontStructure) {
		this->generatedFontStructure = generatedFontStructure;
	}

	const BMprocessfontStructure_t& getProcessStrucutre() const {
		return processStrucutre;
	}

	void setProcessStrucutre(const BMprocessfontStructure_t& processStrucutre) {
		this->processStrucutre = processStrucutre;
	}

	const idList<BMglyph>& getGlyphList() const {
		return glyphList;
	}

	const idList<BMpage>& getPageList() const {
		return pageList;
	}

private:
	void						Clear();
	idList<BMglyph> 			glyphList;
	idList<BMpage> 				pageList;
	BMprocessfontStructure_t	processStrucutre;
	BMgeneratedfontStructure_t 	generatedFontStructure;
	sharedStruct_t 				sharedStruct;
};


/*
 * Here we have idTech .dat font file.
 * Only fonts with one page are supported.
 */

//since we gather more than the used info, we currently use this intermediate
//so in the future might use all the variables it contains
typedef struct
{
	int 	id;			// UTF32 - stored separately
	byte 	width;      // width of glyph in pixels
	byte 	height;     // height of glyph in pixels
	char 	top;        // distance in pixels from the base line to the top of the glyph
	char 	left;       // distance in pixels from the pen to the left edge of the glyph
	byte 	xSkip;      // x adjustment after rendering this glyphBMpage
	byte 	padding;
	uint16 	s;        	// x offset in image where glyph starts (in pixels)
	uint16 	t;        	// y offset in image where glyph starts (in pixels)
} IntermediateGlyphStructure_t;

//this corresponds with the structure defined in fonts.h
typedef struct
{
	byte 	width;      // width of glyph in pixels
	byte 	height;     // height of glyph in pixels
	char 	top;        // distance in pixels from the base line to the top of the glyph
	char 	left;       // distance in pixels from the pen to the left edge of the glyph
	byte 	xSkip;      // x adjustment after rendering this glyphBMpage
	uint16 	s;        	// x offset in image where glyph starts (in pixels)
	uint16 	t;        	// y offset in image where glyph starts (in pixels)
} BFGglyphStructure_t;

class IntermediateGlyph {
public:
	IntermediateGlyph( BMfont* font, BMglyph glyph );

	const IntermediateGlyphStructure_t& getInterGlyphStructue() const {
		return InterGlyphStructue;
	}

private:
	IntermediateGlyphStructure_t InterGlyphStructue;
};

class BFGglyph {
public:
	BFGglyph();

	const BFGglyphStructure_t& getGlyphStructue() const {
		return glyphStructue;
	}

	void setGlyphStructue(const BFGglyphStructure_t& glyphStructue) {
		this->glyphStructue = glyphStructue;
	}

private:
	BFGglyphStructure_t glyphStructue;

};

class BFGpage {
public:
	void Load( BMfont* font, int _id );

	int getId() const {
		return id;
	}

	void setId(int id) {
		this->id = id;
	}

	const idStr& getImageFile() const {
		return imageFile;
	}

	void setImageFile(const idStr& imageFile) {
		this->imageFile = imageFile;
	}

private:
	int 	id;
	idStr	imageFile;
};

typedef struct
{
	short				pointSize;
	short				ascender;
	short				descender;
	short 				numGlyphs;
	idList<BFGglyph*>	glyphs;
	idList<uint32>		glyphsIds;
} BFGfileStructure_t;

class BFGfont {
public:
	BFGfont( sharedStruct_t _sharedStruct );
	virtual ~BFGfont();

	void	CreateFolders( void );
	void 	Save( void );
	void	CopyPageFiles( void );
	void 	Load( BMfont* font );

private:
	void						Clear();
	idList<BFGpage*>			pages;
	idStr 						basePath;
	idStr 						dest_global_folder;
	idStr 						dest_relative_file;
	idStr 						dest_global_file;
	sharedStruct_t 				sharedStruct;
	BFGfileStructure_t 			BFGfileStructure;

};

class blFontImporter {
public:
	blFontImporter();

	void 		FontCompHelp();
	void 		Process( const idCmdArgs& args );

private:
	bool				verbose;
	bool				oldSystem;
	sharedStruct_t 		sharedStruct;
	BMfont * 			BM_font;
	BFGfont *			BFG_font;
	idStr 		GatherComandArgs( const idCmdArgs& args );
};

} /* namespace BFG */

#endif /* NEO_TOOLS_COMPILERS_IMPORTFONT_FONTMETHODS_H_ */
