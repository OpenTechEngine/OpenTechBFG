/**
  \file AmbientOcclusion_blur.pix
  \author Morgan McGuire and Michael Mara, NVIDIA Research

  \brief 7-tap 1D cross-bilateral blur using a packed depth key

  DX11 HLSL port by Leonardo Zide, Treyarch

  Open Source under the "BSD" license: http://www.opensource.org/licenses/bsd-license.php

  Copyright (c) 2011-2012, NVIDIA
  Copyright (c) 2016 Robert Beckebans ( id Tech 4.x integration )
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#include "renderprogs/global.inc"

// *INDENT-OFF*
uniform sampler2D samp0 : register( s0 ); // view color
uniform sampler2D samp1 : register( s1 ); // view depth
 
#define source			samp0 
#define CS_Z_buffer		samp1
 
struct PS_IN
{
	float2 texcoord0 : TEXCOORD0_centroid;
};
 
struct PS_OUT 
{
	float4 color : COLOR;
};
// *INDENT-ON*

//////////////////////////////////////////////////////////////////////////////////////////////
// Tunable Parameters:

//#define NUM_KEY_COMPONENTS 1

// The other parameters in this section must be passed in as macro values

/** Increase to make depth edges crisper. Decrease to reduce flicker. */
#define EDGE_SHARPNESS     (1.0)

/** Step in 2-pixel intervals since we already blurred against neighbors in the
    first AO pass.  This constant can be increased while R decreases to improve
    performance at the expense of some dithering artifacts.

    Morgan found that a scale of 3 left a 1-pixel checkerboard grid that was
    unobjectionable after shading was applied but eliminated most temporal incoherence
    from using small numbers of sample taps.
    */
#define SCALE               (2)

/** Filter radius in pixels. This will be multiplied by SCALE. */
#define R                   (4)

#define MDB_WEIGHTS 	0
//////////////////////////////////////////////////////////////////////////////////////////////

/** Type of data to read from source.  This macro allows
    the same blur shader to be used on different kinds of input data. */
#define VALUE_TYPE        float

/** Swizzle to use to extract the channels of source. This macro allows
    the same blur shader to be used on different kinds of input data. */
#define VALUE_COMPONENTS   r

#define VALUE_IS_KEY       0

/** Channel encoding the bilateral key value (which must not be the same as VALUE_COMPONENTS) */
#if 1 //NUM_KEY_COMPONENTS == 2
#define KEY_COMPONENTS     gb
#else
#define KEY_COMPONENTS     g
#endif

//#if __VERSION__ >= 330
// Gaussian coefficients
//const float gaussian[R + 1] =
//    float[](0.356642, 0.239400, 0.072410, 0.009869);
//    float[](0.398943, 0.241971, 0.053991, 0.004432, 0.000134);  // stddev = 1.0
//	float[]( 0.153170, 0.144893, 0.122649, 0.092902, 0.062970 ); // stddev = 2.0
//      float[](0.111220, 0.107798, 0.098151, 0.083953, 0.067458, 0.050920, 0.036108); // stddev = 3.0
//#endif

/** (1, 0) or (0, 1)*/
//uniform int2       axis;


#define  aoResult       result.color.VALUE_COMPONENTS
#define  keyPassThrough result.color.KEY_COMPONENTS

#if 1 //NUM_KEY_COMPONENTS == 2
/** Returns a number on (0, 1) */
float unpackKey( float2 p )
{
	return p.x * ( 256.0 / 257.0 ) + p.y * ( 1.0 / 257.0 );
}
#else
/** Returns a number on (0, 1) */
float unpackKey( float p )
{
	return p;
}
#endif

//uniform float4        projInfo;

float3 reconstructCSPosition( float2 S, float z )
{
	float4 P;
	P.z = z;
	P.xy = S * rpScreenCorrectionFactor.xy;
	P.w = 1.0;
	
	float4 csP;
	csP.x = dot4( P, rpProjectionMatrixX );
	csP.y = dot4( P, rpProjectionMatrixY );
	csP.z = dot4( P, rpProjectionMatrixZ );
	csP.w = dot4( P, rpProjectionMatrixW );
	
	csP.xyz /= csP.w;
	
	return csP.xyz;
}

//float3 reconstructCSPosition( float2 ssP ) + float2( 0.5 ), P.z, projInfo );

/** Used for preventing AO computation on the sky (at infinite depth) and defining the CS Z to bilateral depth key scaling.
    This need not match the real far plane but should not be much more than it.*/
const float FAR_PLANE_Z = -16000.0;

float3 positionFromKey( float key, int2 ssC )
{
	float z = key * FAR_PLANE_Z;
	//float3 C = reconstructCSPosition( float2( ssC )/* + float2( 0.5 )*/, z, pInfo );
	float3 C = reconstructCSPosition( float2( ssC ), z );
	return C;
}

#if 0 //def normal_notNull
/** Same size as result buffer, do not offset by guard band when reading from it */
uniform sampler2D       normal_buffer;
uniform float4            normal_readMultiplyFirst;
uniform float4            normal_readAddSecond;
#endif

float calculateBilateralWeight( float key, float tapKey, int2 tapLoc, float3 n_C, float3 C )
{
	// range domain (the "bilateral" weight). As depth difference increases, decrease weight.
	float depthWeight = max( 0.0, 1.0 - ( EDGE_SHARPNESS * 2000.0 ) * abs( tapKey - key ) );
	float k_normal = 1.0;
	float k_plane = 1.0;
	
	// Prevents blending over creases.
	float normalWeight = 1.0;
	float planeWeight = 1.0;
	
#if 0 //def normal_notNull
	float3 tapN_C = texelFetch( normal_buffer, tapLoc, 0 ).xyz;
	tapN_C = normalize( tapN_C * normal_readMultiplyFirst.xyz + normal_readAddSecond.xyz );
	
	float normalError = 1.0 - dot( tapN_C, n_C ) * k_normal;
	normalWeight = max( ( 1.0 - EDGE_SHARPNESS * normalError ), 0.00 );
	
	float lowDistanceThreshold2 = 0.001;
	
	float3 tapC = positionFromKey( tapKey, tapLoc, projInfo );
	
	// Change in position in camera space
	float3 dq = C - tapC;
	
	// How far away is this point from the original sample
	// in camera space? (Max value is unbounded)
	float distance2 = dot( dq, dq );
	
	// How far off the expected plane (on the perpendicular) is this point?  Max value is unbounded.
	float planeError = max( abs( dot( dq, tapN_C ) ), abs( dot( dq, n_C ) ) );
	
	planeWeight = ( distance2 < lowDistanceThreshold2 ) ? 1.0 :
				  pow( max( 0.0, 1.0 - EDGE_SHARPNESS * 2.0 * k_plane * planeError / sqrt( distance2 ) ), 2.0 );
				  
				  
#endif
				  
	//normalWeight = 1.0;
	//planeWeight = 1.0;
	
	return depthWeight * normalWeight * planeWeight;
}


void main( PS_IN fragment, out PS_OUT result )
{

//#   if __VERSION__ < 330
	float gaussian[R + 1];
//      if R == 0, we never call this shader
// #       if R == 1 // TODO: Actually calculate gaussian weights... this is just Mike winging it here
	// gaussian[0] = 0.5;
	// gaussian[1] = 0.25;
// #       elif R == 2 // TODO: Actually calculate gaussian weights... this is just Mike winging it here
	// gaussian[0] = 0.153170;
	// gaussian[1] = 0.144893;
	// gaussian[2] = 0.122649;
// #       elif R == 3 // TODO: We are losing some base weight here...
	// gaussian[0] = 0.153170;
	// gaussian[1] = 0.144893;
	// gaussian[2] = 0.122649;
	// gaussian[3] = 0.092902;  // stddev = 2.0
// #       elif R == 4
	gaussian[0] = 0.153170;
	gaussian[1] = 0.144893;
	gaussian[2] = 0.122649;
	gaussian[3] = 0.092902;
	gaussian[4] = 0.062970;  // stddev = 2.0
// #       elif R == 5 // TODO: We are losing some base weight here...
	// gaussian[0] = 0.111220;
	// gaussian[1] = 0.107798;
	// gaussian[2] = 0.098151;
	// gaussian[3] = 0.083953;
	// gaussian[4] = 0.067458;
	// gaussian[5] = 0.050920;
// #       elif R == 6
	// gaussian[0] = 0.111220;
	// gaussian[1] = 0.107798;
	// gaussian[2] = 0.098151;
	// gaussian[3] = 0.083953;
	// gaussian[4] = 0.067458;
	// gaussian[5] = 0.050920;
	// gaussian[6] = 0.036108;
// #       endif
//#   endif

	int2 ssC = int2( gl_FragCoord.xy );
	
	float4 temp = texelFetch( source, ssC, 0 );
	
	keyPassThrough = temp.KEY_COMPONENTS;
	float key = unpackKey( keyPassThrough );
	
	VALUE_TYPE sum = temp.VALUE_COMPONENTS;
	
#if 0
	if( fragment.texcoord0.x < 0.5 )
	{
		//discard;
		//result.color = float4( temp.rgb, 1.0 );
		result.color = float4( float3( keyPassThrough ), 1.0 );
		return;
	}
#endif
	
	if( key == 1.0 )
	{
		// Sky pixel (if you aren't using depth keying, disable this test)
		aoResult = sum;
#if defined(BRIGHTPASS)
		result.color = float4( aoResult, aoResult, aoResult, 1.0 );
#endif
		return;
	}
	
	// Base weight for depth falloff.  Increase this for more blurriness,
	// decrease it for better edge discrimination
	float BASE = gaussian[0];
	float totalWeight = BASE;
	sum *= totalWeight;
	float3 n_C;
#if 0 //def normal_notNull
	n_C = normalize( texelFetch( normal_buffer, ssC, 0 ).xyz * normal_readMultiplyFirst.xyz + normal_readAddSecond.xyz );
#endif
	
	float3 C = positionFromKey( key, ssC );
	
#if MDB_WEIGHTS == 0
	for( int r = -R; r <= R; ++r )
	{
		// We already handled the zero case above.  This loop should be unrolled and the static branch optimized out,
		// so the IF statement has no runtime cost
		if( r != 0 )
		{
			int2 tapLoc = ssC + int2( rpJitterTexScale.xy ) * ( r * SCALE );
			temp = texelFetch( source, tapLoc, 0 );
			float      tapKey = unpackKey( temp.KEY_COMPONENTS );
			VALUE_TYPE value  = temp.VALUE_COMPONENTS;
			
			// spatial domain: offset gaussian tap
			float weight = 0.3 + gaussian[abs( r )];
			
			float bilateralWeight = calculateBilateralWeight( key, tapKey, tapLoc, n_C, C );
			
			weight *= bilateralWeight;
			sum += value * weight;
			totalWeight += weight;
		}
	}
#else
	
	float lastBilateralWeight = 9999.0;
	for( int r = -1; r >= -R; --r )
	{
		int2 tapLoc = ssC + int2( rpJitterTexScale.xy ) * ( r * SCALE );
		temp = texelFetch( source, tapLoc, 0 );
		float      tapKey = unpackKey( temp.KEY_COMPONENTS );
		VALUE_TYPE value  = temp.VALUE_COMPONENTS;
	
		// spatial domain: offset gaussian tap
		float weight = 0.3 + gaussian[abs( r )];
	
		// range domain (the "bilateral" weight). As depth difference increases, decrease weight.
		float bilateralWeight = calculateBilateralWeight( key, tapKey, tapLoc, n_C, C );
		bilateralWeight = min( lastBilateralWeight, bilateralWeight );
		lastBilateralWeight = bilateralWeight;
		weight *= bilateralWeight;
		sum += value * weight;
		totalWeight += weight;
	}
	
	lastBilateralWeight = 9999.0;
	for( int r = 1; r <= R; ++r )
	{
		int2 tapLoc = ssC + int2( rpJitterTexScale.xy ) * ( r * SCALE );
		temp = texelFetch( source, tapLoc, 0 );
		float      tapKey = unpackKey( temp.KEY_COMPONENTS );
		VALUE_TYPE value  = temp.VALUE_COMPONENTS;
	
		// spatial domain: offset gaussian tap
		float weight = 0.3 + gaussian[abs( r )];
	
		// range domain (the "bilateral" weight). As depth difference increases, decrease weight.
		float bilateralWeight = calculateBilateralWeight( key, tapKey, tapLoc, n_C, C );
		bilateralWeight = min( lastBilateralWeight, bilateralWeight );
		lastBilateralWeight = bilateralWeight;
		weight *= bilateralWeight;
		sum += value * weight;
		totalWeight += weight;
	}
#endif
	
	const float epsilon = 0.0001;
	aoResult = sum / ( totalWeight + epsilon );
	
#if defined(BRIGHTPASS)
	result.color = float4( aoResult, aoResult, aoResult, 1.0 );
#endif
}
